const builder = require('botbuilder');
const request = require('request-promise-native');
const emoji = require('node-emoji');

async function createStatusUpdate(userData, dialogData) {
  // Generate current timestamp (will be used as ISO)
  const timestamp = new Date();

  // Configure options for Request
  const options = {
    method: 'POST',
    url: `${process.env.MICROSOFT_RESOURCE_CRM}/api/data/v8.2/ee_engagementstatuses`,
    headers: { Authorization: userData.accessTokenCRM },
    json: true,
    body: {
      ee_engagementphase: dialogData.phase,
      ee_engagementnotes: dialogData.status,
      ee_engagementnextsteps: dialogData.nextSteps,
      ee_statusdate: timestamp.toISOString(),
      ee_engagementstatusactivity: '100000011',
      'ee_statusid@odata.bind': `/ee_projects(${dialogData.projectId})`,
    },
  };

  // Return promise generated by Request
  return request(options);
}

module.exports = (bot) => {
  bot.dialog('/engagementstatuscreate', [
    (session, args) => {
      // Store projectId
      session.dialogData.projectId = args;

      // Create message with card
      const msg = new builder.Message(session)
        .attachmentLayout(builder.AttachmentLayout.list)
        .attachments([
          new builder.HeroCard(session)
            .title('The engagement is in which phase?')
            .buttons([
              builder.CardAction.imBack(session, 'New', 'New'),
              builder.CardAction.imBack(session, 'Active', 'Active'),
              builder.CardAction.imBack(session, 'Complete', 'Complete'),
              builder.CardAction.imBack(session, 'Engaged', 'Engaged'),
              builder.CardAction.imBack(session, 'Disengaged', 'Disengaged'),
              builder.CardAction.imBack(session, 'Transitioned', 'Transitioned'),
              builder.CardAction.imBack(session, 'Queued', 'Queued'),
            ]),
        ]);

      // Send message with choice options
      builder.Prompts.choice(
        session,
        msg,
        ['New', 'Active', 'Complete', 'Engaged', 'Disengaged', 'Transitioned', 'Queued'],
        {
          maxRetries: 3,
          retryPrompt: 'Not a valid option',
        });
    },
    (session, results, next) => {
      // Define variable to hold phase
      let phase;

      // Store engagement status
      switch (results.response.entity) {
        case 'New':
          phase = 100000003;
          break;
        case 'Active':
          phase = 100000002;
          break;
        case 'Complete':
          phase = 100000004;
          break;
        case 'Engaged':
          phase = 100000005;
          break;
        case 'Disengaged':
          phase = 100000007;
          break;
        case 'Transitioned':
          phase = 100000009;
          break;
        case 'Queued':
          phase = 100000003;
          break;
        default:
          phase = 100000002;
          break;
      }

      // Store status in dialog data
      session.dialogData.phase = phase;
      session.dialogData.phaseReadable = results.response.entity;

      next();
    },
    (session) => {
      // Prompt user for status
      builder.Prompts.text(session, 'Thanks. Now, what is the current status of this project?');
    },
    (session, results, next) => {
      // Store status
      session.dialogData.status = results.response;
      next();
    },
    (session) => {
      // Prompt user for next steps
      builder.Prompts.text(session, 'Got it. Finally, what are the next steps for this project?');
    },
    (session, results, next) => {
      // Store next steps
      session.dialogData.nextSteps = results.response;
      next();
    },
    (session) => {
      // Confirm submission
      const msg = new builder.Message(session)
        .attachmentLayout(builder.AttachmentLayout.list)
        .attachments([
          new builder.HeroCard(session)
            .title('Thanks! Here\'s what I have:'),
          new builder.HeroCard(session)
            .text(`Phase: ${session.dialogData.phaseReadable}`),
          new builder.HeroCard(session)
            .text(`Phase: ${session.dialogData.phaseReadable}`),
          new builder.HeroCard(session)
            .text(`Status: ${session.dialogData.status}`),
          new builder.HeroCard(session)
            .text(`Next Steps: ${session.dialogData.nextSteps}`),
          new builder.HeroCard(session)
            .title('Would you like to submit this update?')
            .buttons([
              builder.CardAction.imBack(session, 'Submit', 'Submit'),
              builder.CardAction.imBack(session, 'Cancel', 'Cancel'),
            ]),
        ]);

      // Send message with choice options
      builder.Prompts.choice(
        session,
        msg,
        ['Submit', 'Cancel'],
        {
          maxRetries: 3,
          retryPrompt: 'Not a valid option',
        });
    },
    async (session, results) => {
      // Upload message, else end dialog
      switch (results.response.entity) {
        case 'Submit':
          try {
            // Create status update
            await createStatusUpdate(session.userData, session.dialogData);

            // Send card to user with a link to the engagement
            const msg = new builder.Message(session)
              .attachmentLayout(builder.AttachmentLayout.list)
              .attachments([
                new builder.HeroCard(session)
                  .title(`Thanks for providing this status update. You're good to go! ${emoji.get('thumbsup')}`)
                  .buttons([
                    builder.CardAction.openUrl(session, `${process.env.MICROSOFT_RESOURCE_CRM}/main.aspx?etc=10096&extraqs=formid%3d33679b2b-bfd5-4e84-a63d-13aa63146ebb&id=%7b${session.dialogData.projectId}%7d&pagetype=entityrecord`, 'Browser'),
                  ]),
              ]);
            session.send(msg);
            session.replaceDialog('/');
          } catch (error) {
            session.send('My apologies, however there was an error submitting your status update');
            console.log(error);
            session.replaceDialog('/');
          }
          break;
        case 'Cancel':
          session.send(`Cancelled your status update ${emoji.get('scissors')}`);
          session.replaceDialog('/');
          break;
        default:
          break;
      }
    },
  ]);
};
